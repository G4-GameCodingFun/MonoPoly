using UnityEngine;
using TMPro;

/// <summary>
/// Script ƒë·ªÉ thay th·∫ø c√°c emoji icon trong TextMeshPro b·∫±ng text ho·∫∑c icon Unicode ƒë∆°n gi·∫£n
/// </summary>
public static class IconReplacer
{
    /// <summary>
    /// Thay th·∫ø t·∫•t c·∫£ c√°c emoji icon trong text b·∫±ng text th√¥ng th∆∞·ªùng
    /// </summary>
    /// <param name="text">Text g·ªëc ch·ª©a emoji</param>
    /// <returns>Text ƒë√£ ƒë∆∞·ª£c thay th·∫ø</returns>
    public static string ReplaceEmojis(string text)
    {
        if (string.IsNullOrEmpty(text))
            return text;

        string result = text;

        // Thay th·∫ø c√°c emoji c·∫£nh b√°o
        result = result.Replace("‚ö†Ô∏è", "[C·∫¢NH B√ÅO]");
        result = result.Replace("üíÄ", "[PH√Å S·∫¢N]");
        result = result.Replace("‚úÖ", "[TH√ÄNH C√îNG]");
        result = result.Replace("ü§ñ", "[BOT]");
        
        // Thay th·∫ø c√°c emoji countdown (ch·ªâ gi·ªØ l·∫°i [BOT])
        result = result.Replace("‚è∏Ô∏è", "");
        result = result.Replace("üé≤", "");
        result = result.Replace("‚è≥", "");
        result = result.Replace("‚è∞", "");
        result = result.Replace("üéÆ", "");

        return result;
    }

    /// <summary>
    /// Thay th·∫ø emoji b·∫±ng icon Unicode ƒë∆°n gi·∫£n
    /// </summary>
    /// <param name="text">Text g·ªëc ch·ª©a emoji</param>
    /// <returns>Text ƒë√£ ƒë∆∞·ª£c thay th·∫ø</returns>
    public static string ReplaceWithUnicodeIcons(string text)
    {
        if (string.IsNullOrEmpty(text))
            return text;

        string result = text;

        // Thay th·∫ø b·∫±ng Unicode symbols ƒë∆°n gi·∫£n
        result = result.Replace("‚ö†Ô∏è", "‚ö†");  // Unicode warning sign
        result = result.Replace("üíÄ", "‚ò†");  // Unicode skull
        result = result.Replace("‚úÖ", "‚úì");  // Unicode checkmark
        result = result.Replace("ü§ñ", "‚öô");  // Unicode gear
        
        // Thay th·∫ø c√°c emoji countdown (ch·ªâ gi·ªØ l·∫°i [BOT])
        result = result.Replace("‚è∏Ô∏è", "");
        result = result.Replace("üé≤", "");
        result = result.Replace("‚è≥", "");
        result = result.Replace("‚è∞", "");
        result = result.Replace("üéÆ", "");

        return result;
    }

    /// <summary>
    /// Thay th·∫ø emoji b·∫±ng text m√¥ t·∫£
    /// </summary>
    /// <param name="text">Text g·ªëc ch·ª©a emoji</param>
    /// <returns>Text ƒë√£ ƒë∆∞·ª£c thay th·∫ø</returns>
    public static string ReplaceWithDescriptiveText(string text)
    {
        if (string.IsNullOrEmpty(text))
            return text;

        string result = text;

        // Thay th·∫ø b·∫±ng text m√¥ t·∫£
        result = result.Replace("‚ö†Ô∏è", "C·∫¢NH B√ÅO:");
        result = result.Replace("üíÄ", "PH√Å S·∫¢N:");
        result = result.Replace("‚úÖ", "TH√ÄNH C√îNG:");
        result = result.Replace("ü§ñ", "BOT:");
        
        // Thay th·∫ø c√°c emoji countdown (ch·ªâ gi·ªØ l·∫°i [BOT])
        result = result.Replace("‚è∏Ô∏è", "");
        result = result.Replace("üé≤", "");
        result = result.Replace("‚è≥", "");
        result = result.Replace("‚è∞", "");
        result = result.Replace("üéÆ", "");

        return result;
    }

    /// <summary>
    /// √Åp d·ª•ng thay th·∫ø cho TextMeshPro component
    /// </summary>
    /// <param name="tmpText">TextMeshPro component</param>
    /// <param name="method">Ph∆∞∆°ng th·ª©c thay th·∫ø (0: Remove, 1: Unicode, 2: Descriptive)</param>
    public static void ApplyToTextMeshPro(TextMeshProUGUI tmpText, int method = 0)
    {
        if (tmpText == null) return;

        string originalText = tmpText.text;
        string newText = "";

        switch (method)
        {
            case 0:
                newText = ReplaceEmojis(originalText);
                break;
            case 1:
                newText = ReplaceWithUnicodeIcons(originalText);
                break;
            case 2:
                newText = ReplaceWithDescriptiveText(originalText);
                break;
            default:
                newText = ReplaceEmojis(originalText);
                break;
        }

        tmpText.text = newText;
    }

    /// <summary>
    /// √Åp d·ª•ng thay th·∫ø cho t·∫•t c·∫£ TextMeshPro trong scene
    /// </summary>
    /// <param name="method">Ph∆∞∆°ng th·ª©c thay th·∫ø (0: Remove, 1: Unicode, 2: Descriptive)</param>
    public static void ApplyToAllTextMeshPro(int method = 0)
    {
        TextMeshProUGUI[] allTexts = Object.FindObjectsOfType<TextMeshProUGUI>();
        
        foreach (var text in allTexts)
        {
            ApplyToTextMeshPro(text, method);
        }

        Debug.Log($"ƒê√£ thay th·∫ø emoji trong {allTexts.Length} TextMeshPro components");
    }
} 