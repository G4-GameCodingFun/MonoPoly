using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using UnityEngine.SceneManagement;

public class BankruptcyManager : MonoBehaviour
{
    public static BankruptcyManager Instance;
    
    [Header("UI Components")]
    public GameObject bankruptcyPanel;
    public TextMeshProUGUI titleText;
    public TextMeshProUGUI messageText;
    public TMP_Dropdown propertiesDropdown;
    public Button sellButton;
    public Button cancelButton;
    
    [Header("Animation Settings")]
    public float showDuration = 0.3f;
    public float hideDuration = 0.2f;
    public AnimationCurve showCurve = AnimationCurve.EaseInOut(0, 0, 1, 1);
    public AnimationCurve hideCurve = AnimationCurve.EaseInOut(0, 1, 1, 0);
    
    [Header("Settings")]
    public int startingMoney = 200; // Ti·ªÅn g·ªëc ƒë·ªÉ test (ƒë√£ ƒë∆∞·ª£c set m·∫∑c ƒë·ªãnh trong PlayerController)
    
    private PlayerController currentPlayer;
    private List<PropertyTile> sellableProperties = new List<PropertyTile>();
    private PropertyTile selectedProperty;
    private bool isPanelVisible = false;
    private CanvasGroup panelCanvasGroup;
    
    // Th√™m bi·∫øn tr·∫°ng th√°i ƒë·ªÉ GameManager bi·∫øt khi n√†o ƒëang ·ªü ch·∫ø ƒë·ªô ph√° s·∫£n
    public bool isInBankruptcyMode = false;
    
    private void Awake()
    {
        if (Instance == null)
            Instance = this;
        else
            Destroy(gameObject);
    }
    
    private void Start()
    {
        // Ti·ªÅn ƒë√£ ƒë∆∞·ª£c set m·∫∑c ƒë·ªãnh 200$ trong PlayerController
        // C√≥ th·ªÉ override ·ªü ƒë√¢y n·∫øu c·∫ßn test v·ªõi s·ªë ti·ªÅn kh√°c
        if (GameManager.Instance != null && startingMoney != 200)
        {
            foreach (var player in GameManager.Instance.players)
            {
                player.money = startingMoney;
            }
        }
        
        SetupUI();
        SetupPanel();
        
        Debug.Log("‚úÖ BankruptcyManager ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng!");
    }
    
    private void SetupUI()
    {
        if (propertiesDropdown != null)
        {
            propertiesDropdown.onValueChanged.AddListener(OnDropdownValueChanged);
        }
        
        if (sellButton != null)
            sellButton.onClick.AddListener(SellSelectedProperty);
            
        if (cancelButton != null)
            cancelButton.onClick.AddListener(CloseBankruptcyPanel);
    }
    
    private void SetupPanel()
    {
        if (bankruptcyPanel != null)
        {
            // Th√™m CanvasGroup n·∫øu ch∆∞a c√≥
            panelCanvasGroup = bankruptcyPanel.GetComponent<CanvasGroup>();
            if (panelCanvasGroup == null)
            {
                panelCanvasGroup = bankruptcyPanel.AddComponent<CanvasGroup>();
            }
            
            // ·∫®n panel ban ƒë·∫ßu
            panelCanvasGroup.alpha = 0f;
            panelCanvasGroup.interactable = false;
            panelCanvasGroup.blocksRaycasts = false;
            bankruptcyPanel.SetActive(false);
            isPanelVisible = false;
        }
    }
    
    /// <summary>
    /// X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn item trong dropdown
    /// </summary>
    private void OnDropdownValueChanged(int index)
    {
        if (index > 0 && index - 1 < sellableProperties.Count) // index 0 l√† "Ch·ªçn t√†i s·∫£n..."
        {
            selectedProperty = sellableProperties[index - 1];
        }
        else
        {
            selectedProperty = null;
        }
        
        UpdateSellButton();
    }
    
    /// <summary>
    /// Ki·ªÉm tra xem player c√≥ b·ªã ph√° s·∫£n kh√¥ng
    /// </summary>
    public bool CheckBankruptcy(PlayerController player)
    {
        if (player == null) return false;
        
        // Ki·ªÉm tra n·∫øu ti·ªÅn < 0
        if (player.money < 0)
        {
            // T√≠nh t·ªïng gi√° tr·ªã t√†i s·∫£n c√≥ th·ªÉ b√°n
            int totalAssetValue = CalculateTotalAssetValue(player);
            
            // N·∫øu c√≥ t√†i s·∫£n ƒë·ªÉ b√°n
            if (totalAssetValue > 0)
            {
                if (player.isBot)
                {
                    // Bot t·ª± ƒë·ªông b√°n t√†i s·∫£n
                    HandleBotBankruptcy(player);
                }
                else
                {
                    // Ng∆∞·ªùi ch∆°i hi·ªÉn th·ªã panel ƒë·ªÉ ch·ªçn
                    ShowBankruptcyPanel(player);
                }
                return true;
            }
            else
            {
                // Kh√¥ng c√≥ t√†i s·∫£n, game over
                HandleGameOver(player);
                return true;
            }
        }
        
        return false;
    }
    
    /// <summary>
    /// T√≠nh t·ªïng gi√° tr·ªã t√†i s·∫£n c√≥ th·ªÉ b√°n
    /// </summary>
    private int CalculateTotalAssetValue(PlayerController player)
    {
        int total = 0;
        sellableProperties.Clear();
        
        foreach (var tile in player.ownedTiles)
        {
            if (tile is PropertyTile propertyTile)
            {
                int sellValue = propertyTile.GetPrice() / 2; // B√°n v·ªõi gi√° 50% gi√° mua
                total += sellValue;
                sellableProperties.Add(propertyTile);
            }
        }
        
        return total;
    }
    
    /// <summary>
    /// Hi·ªÉn th·ªã panel ph√° s·∫£n
    /// </summary>
    private void ShowBankruptcyPanel(PlayerController player)
    {
        currentPlayer = player;
        selectedProperty = null;
        
        // Set tr·∫°ng th√°i ph√° s·∫£n v√† th√¥ng b√°o cho GameManager
        isInBankruptcyMode = true;
        if (GameManager.Instance != null)
        {
            GameManager.Instance.isWaitingForPlayerAction = true;
            string statusMessage = IconReplacer.ReplaceEmojis($"‚ö†Ô∏è {player.playerName} ƒëang ·ªü t√¨nh tr·∫°ng ph√° s·∫£n! H√£y b√°n t√†i s·∫£n ƒë·ªÉ tr·∫£ n·ª£.");
            GameManager.Instance.ShowStatus(statusMessage);
        }
        
        if (bankruptcyPanel != null && !isPanelVisible)
        {
            StartCoroutine(ShowPanelAnimation());
            
            if (titleText != null)
                titleText.text = IconReplacer.ReplaceEmojis($"‚ö†Ô∏è PH√Å S·∫¢N - {player.playerName}");
                
            if (messageText != null)
                messageText.text = $"B·∫°n ƒëang thi·∫øu {Mathf.Abs(player.money)}$!\nH√£y ch·ªçn t√†i s·∫£n ƒë·ªÉ b√°n.";
            
            PopulateDropdown();
            UpdateSellButton();
        }
    }
    
    /// <summary>
    /// ƒêi·ªÅn danh s√°ch t√†i s·∫£n v√†o dropdown
    /// </summary>
    private void PopulateDropdown()
    {
        if (propertiesDropdown == null) return;
        
        propertiesDropdown.ClearOptions();
        
        // Th√™m option ƒë·∫ßu ti√™n
        List<string> options = new List<string>();
        
        if (sellableProperties.Count == 0)
        {
            options.Add(IconReplacer.ReplaceEmojis("üíÄ Kh√¥ng c√≤n t√†i s·∫£n ƒë·ªÉ b√°n! T·ª± ƒë·ªông c∆∞·ª°ng ch·∫ø ph√° s·∫£n..."));
        }
        else
        {
            options.Add("Ch·ªçn t√†i s·∫£n...");
            
            // Th√™m c√°c t√†i s·∫£n
            foreach (var property in sellableProperties)
            {
                int sellValue = property.GetPrice() / 2;
                string houseInfo = "";
                if (property.houseCount > 0)
                    houseInfo = $" ({property.houseCount} nh√†)";
                else if (property.hasHotel)
                    houseInfo = " (Kh√°ch s·∫°n)";
                    
                string optionText = $"{property.tileName}{houseInfo} - B√°n: {sellValue}$";
                options.Add(optionText);
            }
        }
        
        propertiesDropdown.AddOptions(options);
        propertiesDropdown.value = 0; // Reset v·ªÅ option ƒë·∫ßu ti√™n
        
        // Disable dropdown n·∫øu kh√¥ng c√≤n t√†i s·∫£n
        propertiesDropdown.interactable = sellableProperties.Count > 0;
    }
    
    /// <summary>
    /// C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t b√°n
    /// </summary>
    private void UpdateSellButton()
    {
        if (sellButton != null)
        {
            sellButton.interactable = selectedProperty != null;
            
            if (selectedProperty != null)
            {
                int sellValue = selectedProperty.GetPrice() / 2;
                sellButton.GetComponentInChildren<TextMeshProUGUI>().text = $"B√ÅN T√ÄI S·∫¢N (+{sellValue}$)";
            }
            else
            {
                sellButton.GetComponentInChildren<TextMeshProUGUI>().text = "B√ÅN T√ÄI S·∫¢N";
            }
        }
    }
    
    /// <summary>
    /// B√°n t√†i s·∫£n ƒë√£ ch·ªçn
    /// </summary>
    private void SellSelectedProperty()
    {
        if (selectedProperty == null || currentPlayer == null) return;
        
        // B√°n t√†i s·∫£n
        currentPlayer.SellProperty(selectedProperty);
        
        // Ki·ªÉm tra l·∫°i xem c√≤n thi·∫øu ti·ªÅn kh√¥ng
        if (currentPlayer.money >= 0)
        {
            // ƒê√£ ƒë·ªß ti·ªÅn, ƒë√≥ng panel
            CloseBankruptcyPanel();
            if (GameManager.Instance != null)
                GameManager.Instance.ShowInfoHud($"{currentPlayer.playerName} ƒë√£ b√°n t√†i s·∫£n v√† tho√°t kh·ªèi t√¨nh tr·∫°ng ph√° s·∫£n!");
        }
        else
        {
            // V·∫´n c√≤n thi·∫øu ti·ªÅn, c·∫≠p nh·∫≠t l·∫°i danh s√°ch
            sellableProperties.Remove(selectedProperty);
            selectedProperty = null;
            
            if (sellableProperties.Count == 0)
            {
                // H·∫øt t√†i s·∫£n ƒë·ªÉ b√°n - T·ª∞ ƒê·ªòNG c∆∞·ª°ng ch·∫ø ph√° s·∫£n
                if (messageText != null)
                    messageText.text = IconReplacer.ReplaceEmojis($"üíÄ ƒê√£ b√°n h·∫øt t√†i s·∫£n nh∆∞ng v·∫´n thi·∫øu {Mathf.Abs(currentPlayer.money)}$!\nH·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông c∆∞·ª°ng ch·∫ø ph√° s·∫£n sau 3 gi√¢y...");
                
                if (GameManager.Instance != null)
                {
                    string infoMessage = IconReplacer.ReplaceEmojis($"üíÄ {currentPlayer.playerName} ƒë√£ b√°n h·∫øt t√†i s·∫£n nh∆∞ng v·∫´n thi·∫øu {Mathf.Abs(currentPlayer.money)}$! T·ª± ƒë·ªông c∆∞·ª°ng ch·∫ø ph√° s·∫£n.");
                    GameManager.Instance.ShowInfoHud(infoMessage, 3f);
                }
                
                // T·ª± ƒë·ªông c∆∞·ª°ng ch·∫ø ph√° s·∫£n sau 3 gi√¢y
                StartCoroutine(AutoForceBankruptcy());
            }
            else
            {
                // C·∫≠p nh·∫≠t UI
                string warningMessage = "";
                if (sellableProperties.Count <= 2)
                {
                    warningMessage = IconReplacer.ReplaceEmojis($"\n‚ö†Ô∏è C·∫¢NH B√ÅO: Ch·ªâ c√≤n {sellableProperties.Count} t√†i s·∫£n!");
                }
                
                if (messageText != null)
                    messageText.text = $"V·∫´n c√≤n thi·∫øu {Mathf.Abs(currentPlayer.money)}$!\nH√£y ch·ªçn t√†i s·∫£n kh√°c ƒë·ªÉ b√°n.{warningMessage}";
                    
                PopulateDropdown();
                UpdateSellButton();
                
                // Th√¥ng b√°o cho GameManager r·∫±ng v·∫´n ƒëang ·ªü ch·∫ø ƒë·ªô ph√° s·∫£n
                if (GameManager.Instance != null)
                {
                    string statusMessage = IconReplacer.ReplaceEmojis($"‚ö†Ô∏è {currentPlayer.playerName} v·∫´n c√≤n thi·∫øu {Mathf.Abs(currentPlayer.money)}$!");
                    if (sellableProperties.Count <= 2)
                    {
                        statusMessage += $" Ch·ªâ c√≤n {sellableProperties.Count} t√†i s·∫£n!";
                    }
                    GameManager.Instance.ShowStatus(statusMessage);
                }
            }
        }
    }
    
    /// <summary>
    /// ƒê√≥ng panel ph√° s·∫£n
    /// </summary>
    private void CloseBankruptcyPanel()
    {
        if (bankruptcyPanel != null && isPanelVisible)
        {
            StartCoroutine(HidePanelAnimation());
        }
        
        // Reset tr·∫°ng th√°i ph√° s·∫£n v√† th√¥ng b√°o cho GameManager
        isInBankruptcyMode = false;
        if (GameManager.Instance != null)
        {
            GameManager.Instance.isWaitingForPlayerAction = false;
            string successMessage = IconReplacer.ReplaceEmojis($"‚úÖ {currentPlayer?.playerName} ƒë√£ tho√°t kh·ªèi t√¨nh tr·∫°ng ph√° s·∫£n!");
            GameManager.Instance.ShowStatus(successMessage);
        }
    }
    
    /// <summary>
    /// X·ª≠ l√Ω bot ph√° s·∫£n - t·ª± ƒë·ªông b√°n t√†i s·∫£n
    /// </summary>
    private void HandleBotBankruptcy(PlayerController player)
    {
        Debug.Log($"ü§ñ {player.playerName} (Bot) ƒëang x·ª≠ l√Ω ph√° s·∫£n...");
        
        // Set tr·∫°ng th√°i ph√° s·∫£n cho bot
        isInBankruptcyMode = true;
        if (GameManager.Instance != null)
        {
            GameManager.Instance.isWaitingForPlayerAction = true;
            string botStatus = IconReplacer.ReplaceEmojis($"ü§ñ {player.playerName} (Bot) ƒëang x·ª≠ l√Ω ph√° s·∫£n...");
            GameManager.Instance.ShowStatus(botStatus);
        }
        
        // T√≠nh l·∫°i danh s√°ch t√†i s·∫£n c√≥ th·ªÉ b√°n
        CalculateTotalAssetValue(player);
        
        // Bot s·∫Ω b√°n t√†i s·∫£n cho ƒë·∫øn khi ƒë·ªß ti·ªÅn
        while (player.money < 0 && sellableProperties.Count > 0)
        {
            // B√°n t√†i s·∫£n ƒë·∫Øt nh·∫•t tr∆∞·ªõc
            PropertyTile mostExpensive = null;
            int maxValue = 0;
            
            foreach (var property in sellableProperties)
            {
                int sellValue = property.GetPrice() / 2;
                if (sellValue > maxValue)
                {
                    maxValue = sellValue;
                    mostExpensive = property;
                }
            }
            
            if (mostExpensive != null)
            {
                player.SellProperty(mostExpensive);
                sellableProperties.Remove(mostExpensive);
                
                if (GameManager.Instance != null)
                {
                    string sellMessage = IconReplacer.ReplaceEmojis($"ü§ñ {player.playerName} ƒë√£ b√°n {mostExpensive.tileName} ƒë·ªÉ tr·∫£ n·ª£");
                    GameManager.Instance.ShowInfoHud(sellMessage);
                }
                
                // Ch·ªù m·ªôt ch√∫t ƒë·ªÉ ng∆∞·ªùi ch∆°i th·∫•y th√¥ng b√°o
                StartCoroutine(DelayForBotAction());
            }
            else
            {
                break;
            }
        }
        
        // Ki·ªÉm tra l·∫°i sau khi b√°n
        if (player.money >= 0)
        {
            // Reset tr·∫°ng th√°i ph√° s·∫£n
            isInBankruptcyMode = false;
            if (GameManager.Instance != null)
            {
                GameManager.Instance.isWaitingForPlayerAction = false;
                string botSuccessMessage = IconReplacer.ReplaceEmojis($"ü§ñ {player.playerName} ƒë√£ tho√°t kh·ªèi t√¨nh tr·∫°ng ph√° s·∫£n!");
                GameManager.Instance.ShowInfoHud(botSuccessMessage);
            }
        }
        else
        {
            // V·∫´n c√≤n thi·∫øu ti·ªÅn sau khi b√°n h·∫øt t√†i s·∫£n - c∆∞·ª°ng ch·∫ø ph√° s·∫£n
            if (GameManager.Instance != null)
            {
                string botBankruptcyMessage = IconReplacer.ReplaceEmojis($"üíÄ {player.playerName} (Bot) ƒë√£ b√°n h·∫øt t√†i s·∫£n nh∆∞ng v·∫´n thi·∫øu {Mathf.Abs(player.money)}$! B·ªã c∆∞·ª°ng ch·∫ø ph√° s·∫£n.");
                GameManager.Instance.ShowInfoHud(botBankruptcyMessage, 3f);
            }
            
            // Ch·ªù m·ªôt ch√∫t ƒë·ªÉ ng∆∞·ªùi ch∆°i th·∫•y th√¥ng b√°o
            StartCoroutine(DelayForBotAction());
            
            // X·ª≠ l√Ω game over ngay l·∫≠p t·ª©c cho bot
            HandleGameOver(player);
        }
    }
    
    /// <summary>
    /// X·ª≠ l√Ω game over khi player ph√° s·∫£n ho√†n to√†n
    /// </summary>
    private void HandleGameOver(PlayerController player)
    {
        Debug.Log($"üéÆ GAME OVER - {player.playerName} ƒë√£ ph√° s·∫£n ho√†n to√†n!");
        
        // Reset tr·∫°ng th√°i ph√° s·∫£n
        isInBankruptcyMode = false;
        
        if (GameManager.Instance != null)
        {
            GameManager.Instance.isWaitingForPlayerAction = false;
            GameManager.Instance.ShowInfoHud($"üéÆ GAME OVER - {player.playerName} ƒë√£ ph√° s·∫£n!", 5f);
            
            // T√¨m index c·ªßa player tr∆∞·ªõc khi x√≥a
            int playerIndex = GameManager.Instance.players.IndexOf(player);
            
            // Lo·∫°i b·ªè player kh·ªèi danh s√°ch
            GameManager.Instance.players.Remove(player);
            
            // C·∫≠p nh·∫≠t currentTileIndexes n·∫øu c·∫ßn
            if (playerIndex >= 0 && playerIndex < GameManager.Instance.currentTileIndexes.Length)
            {
                // X√≥a index c·ªßa player ƒë√£ b·ªã lo·∫°i
                for (int i = playerIndex; i < GameManager.Instance.currentTileIndexes.Length - 1; i++)
                {
                    GameManager.Instance.currentTileIndexes[i] = GameManager.Instance.currentTileIndexes[i + 1];
                }
            }
            
            // X√≥a player object
            if (player.gameObject != null)
                Destroy(player.gameObject);
                
            // Ki·ªÉm tra xem c√≤n player n√†o kh√¥ng
            if (GameManager.Instance.players.Count <= 1)
            {
                // Ch·ªâ c√≤n 1 player ho·∫∑c kh√¥ng c√≤n ai - k·∫øt th√∫c game
                StartCoroutine(EndGame());
            }
            else
            {
                // C·∫≠p nh·∫≠t l·∫°i currentPlayerIndex n·∫øu c·∫ßn
                if (GameManager.Instance.currentPlayerIndex >= GameManager.Instance.players.Count)
                {
                    GameManager.Instance.currentPlayerIndex = 0;
                }
            }
        }
        
        CloseBankruptcyPanel();
    }
    
    /// <summary>
    /// Animation hi·ªÉn th·ªã panel
    /// </summary>
    private IEnumerator ShowPanelAnimation()
    {
        if (panelCanvasGroup == null) yield break;
        
        isPanelVisible = true;
        bankruptcyPanel.SetActive(true);
        panelCanvasGroup.interactable = false;
        panelCanvasGroup.blocksRaycasts = false;
        
        float elapsedTime = 0f;
        while (elapsedTime < showDuration)
        {
            elapsedTime += Time.deltaTime;
            float progress = elapsedTime / showDuration;
            float alpha = showCurve.Evaluate(progress);
            
            panelCanvasGroup.alpha = alpha;
            yield return null;
        }
        
        panelCanvasGroup.alpha = 1f;
        panelCanvasGroup.interactable = true;
        panelCanvasGroup.blocksRaycasts = true;
    }
    
    /// <summary>
    /// Animation ·∫©n panel
    /// </summary>
    private IEnumerator HidePanelAnimation()
    {
        if (panelCanvasGroup == null) yield break;
        
        isPanelVisible = false;
        panelCanvasGroup.interactable = false;
        panelCanvasGroup.blocksRaycasts = false;
        
        float elapsedTime = 0f;
        while (elapsedTime < hideDuration)
        {
            elapsedTime += Time.deltaTime;
            float progress = elapsedTime / hideDuration;
            float alpha = hideCurve.Evaluate(progress);
            
            panelCanvasGroup.alpha = alpha;
            yield return null;
        }
        
        panelCanvasGroup.alpha = 0f;
        bankruptcyPanel.SetActive(false);
        
        // Reset data
        currentPlayer = null;
        selectedProperty = null;
        sellableProperties.Clear();
    }
    
    /// <summary>
    /// Delay cho bot action ƒë·ªÉ ng∆∞·ªùi ch∆°i th·∫•y th√¥ng b√°o
    /// </summary>
    private IEnumerator DelayForBotAction()
    {
        yield return new WaitForSeconds(1f);
    }

    /// <summary>
    /// T·ª± ƒë·ªông c∆∞·ª°ng ch·∫ø ph√° s·∫£n khi ƒë√£ b√°n h·∫øt t√†i s·∫£n m√† v·∫´n kh√¥ng ƒë·ªß ti·ªÅn
    /// </summary>
    private IEnumerator AutoForceBankruptcy()
    {
        yield return new WaitForSeconds(3f);

        if (currentPlayer != null)
        {
                    Debug.Log($"üíÄ {currentPlayer.playerName} ƒë√£ b√°n h·∫øt t√†i s·∫£n nh∆∞ng v·∫´n thi·∫øu {Mathf.Abs(currentPlayer.money)}$! T·ª± ƒë·ªông c∆∞·ª°ng ch·∫ø ph√° s·∫£n.");
        
        if (GameManager.Instance != null)
        {
            string forceBankruptcyMessage = IconReplacer.ReplaceEmojis($"üíÄ {currentPlayer.playerName} b·ªã c∆∞·ª°ng ch·∫ø ph√° s·∫£n!");
            GameManager.Instance.ShowInfoHud(forceBankruptcyMessage, 3f);
        }
            
            // X·ª≠ l√Ω game over
            HandleGameOver(currentPlayer);
        }
    }
    
    /// <summary>
    /// K·∫øt th√∫c game
    /// </summary>
    private IEnumerator EndGame()
    {
        yield return new WaitForSeconds(3f);
        
        if (GameManager.Instance.players.Count == 1)
        {
            PlayerController winner = GameManager.Instance.players[0];
            GameManager.Instance.ShowInfoHud($"üèÜ CHI·∫æN TH·∫ÆNG! {winner.playerName} l√† ng∆∞·ªùi chi·∫øn th·∫Øng!", 10f);
        }
        else
        {
            GameManager.Instance.ShowInfoHud("üéÆ T·∫•t c·∫£ ng∆∞·ªùi ch∆°i ƒë√£ ph√° s·∫£n! Game k·∫øt th√∫c.", 10f);
        }
        
        // Hi·ªÉn th·ªã th√¥ng b√°o tho√°t game
        yield return new WaitForSeconds(5f);
        GameManager.Instance.ShowInfoHud("‚è∞ Tho√°t v·ªÅ m√†n h√¨nh ch√≠nh sau 15 gi√¢y...", 15f);
        
        // Ch·ªù 15 gi√¢y r·ªìi tho√°t v·ªÅ m√†n h√¨nh ch√≠nh
        yield return new WaitForSeconds(15f);
        
        // Tho√°t v·ªÅ m√†n h√¨nh ch√≠nh
        UnityEngine.SceneManagement.SceneManager.LoadScene("CreateAccountScene");
    }
} 