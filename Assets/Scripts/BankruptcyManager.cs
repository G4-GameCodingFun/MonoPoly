using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class BankruptcyManager : MonoBehaviour
{
    public static BankruptcyManager Instance;
    
    [Header("UI Components")]
    public GameObject bankruptcyPanel;
    public TextMeshProUGUI titleText;
    public TextMeshProUGUI messageText;
    public Transform propertiesContainer;
    public GameObject propertyItemPrefab;
    public Button sellButton;
    public Button cancelButton;
    
    [Header("Settings")]
    public int startingMoney = 200; // Ti·ªÅn g·ªëc ƒë·ªÉ test
    
    private PlayerController currentPlayer;
    private List<PropertyTile> sellableProperties = new List<PropertyTile>();
    private PropertyTile selectedProperty;
    
    private void Awake()
    {
        if (Instance == null)
            Instance = this;
        else
            Destroy(gameObject);
    }
    
    private void Start()
    {
        // H·∫° th·∫•p ti·ªÅn g·ªëc xu·ªëng 200 ƒë·ªÉ test
        if (GameManager.Instance != null)
        {
            foreach (var player in GameManager.Instance.players)
            {
                player.money = startingMoney;
            }
        }
        
        SetupUI();
    }
    
    private void SetupUI()
    {
        if (sellButton != null)
            sellButton.onClick.AddListener(SellSelectedProperty);
            
        if (cancelButton != null)
            cancelButton.onClick.AddListener(CloseBankruptcyPanel);
    }
    
    /// <summary>
    /// Ki·ªÉm tra xem player c√≥ b·ªã ph√° s·∫£n kh√¥ng
    /// </summary>
    public bool CheckBankruptcy(PlayerController player)
    {
        if (player == null) return false;
        
        // Ki·ªÉm tra n·∫øu ti·ªÅn < 0
        if (player.money < 0)
        {
            // T√≠nh t·ªïng gi√° tr·ªã t√†i s·∫£n c√≥ th·ªÉ b√°n
            int totalAssetValue = CalculateTotalAssetValue(player);
            
            // N·∫øu c√≥ t√†i s·∫£n ƒë·ªÉ b√°n
            if (totalAssetValue > 0)
            {
                ShowBankruptcyPanel(player);
                return true;
            }
            else
            {
                // Kh√¥ng c√≥ t√†i s·∫£n, game over
                HandleGameOver(player);
                return true;
            }
        }
        
        return false;
    }
    
    /// <summary>
    /// T√≠nh t·ªïng gi√° tr·ªã t√†i s·∫£n c√≥ th·ªÉ b√°n
    /// </summary>
    private int CalculateTotalAssetValue(PlayerController player)
    {
        int total = 0;
        sellableProperties.Clear();
        
        foreach (var tile in player.ownedTiles)
        {
            if (tile is PropertyTile propertyTile)
            {
                int sellValue = propertyTile.GetPrice() / 2; // B√°n v·ªõi gi√° 50% gi√° mua
                total += sellValue;
                sellableProperties.Add(propertyTile);
            }
        }
        
        return total;
    }
    
    /// <summary>
    /// Hi·ªÉn th·ªã panel ph√° s·∫£n
    /// </summary>
    private void ShowBankruptcyPanel(PlayerController player)
    {
        currentPlayer = player;
        selectedProperty = null;
        
        if (bankruptcyPanel != null)
        {
            bankruptcyPanel.SetActive(true);
            
            if (titleText != null)
                titleText.text = $"‚ö†Ô∏è PH√Å S·∫¢N - {player.playerName}";
                
            if (messageText != null)
                messageText.text = $"B·∫°n ƒëang thi·∫øu {Mathf.Abs(player.money)}$!\nH√£y b√°n b·ªõt t√†i s·∫£n ƒë·ªÉ tr·∫£ n·ª£.";
            
            PopulatePropertiesList();
            UpdateSellButton();
        }
    }
    
    /// <summary>
    /// ƒêi·ªÅn danh s√°ch t√†i s·∫£n v√†o UI
    /// </summary>
    private void PopulatePropertiesList()
    {
        if (propertiesContainer == null) return;
        
        // X√≥a c√°c item c≈©
        foreach (Transform child in propertiesContainer)
        {
            Destroy(child.gameObject);
        }
        
        // T·∫°o item m·ªõi cho t·ª´ng t√†i s·∫£n
        foreach (var property in sellableProperties)
        {
            if (propertyItemPrefab != null)
            {
                GameObject item = Instantiate(propertyItemPrefab, propertiesContainer);
                SetupPropertyItem(item, property);
            }
        }
    }
    
    /// <summary>
    /// Thi·∫øt l·∫≠p item t√†i s·∫£n trong danh s√°ch
    /// </summary>
    private void SetupPropertyItem(GameObject item, PropertyTile property)
    {
        PropertyItemUI propertyUI = item.GetComponent<PropertyItemUI>();
        if (propertyUI != null)
        {
            propertyUI.Setup(property);
            
            // L·∫Øng nghe s·ª± ki·ªán ch·ªçn
            Toggle toggle = item.GetComponentInChildren<Toggle>();
            if (toggle != null)
            {
                toggle.onValueChanged.RemoveAllListeners();
                toggle.onValueChanged.AddListener((isOn) => {
                    if (isOn)
                    {
                        selectedProperty = property;
                        UpdateSellButton();
                    }
                    else if (selectedProperty == property)
                    {
                        selectedProperty = null;
                        UpdateSellButton();
                    }
                });
            }
        }
        else
        {
            // Fallback cho tr∆∞·ªùng h·ª£p kh√¥ng c√≥ PropertyItemUI component
            TextMeshProUGUI nameText = item.GetComponentInChildren<TextMeshProUGUI>();
            Toggle toggle = item.GetComponentInChildren<Toggle>();
            Button selectButton = item.GetComponentInChildren<Button>();
            
            if (nameText != null)
            {
                int sellValue = property.GetPrice() / 2;
                string houseInfo = "";
                if (property.houseCount > 0)
                    houseInfo = $" ({property.houseCount} nh√†)";
                else if (property.hasHotel)
                    houseInfo = " (Kh√°ch s·∫°n)";
                    
                nameText.text = $"{property.tileName}{houseInfo} - B√°n: {sellValue}$";
            }
            
            if (toggle != null)
            {
                toggle.onValueChanged.RemoveAllListeners();
                toggle.onValueChanged.AddListener((isOn) => {
                    if (isOn)
                    {
                        selectedProperty = property;
                        UpdateSellButton();
                    }
                    else if (selectedProperty == property)
                    {
                        selectedProperty = null;
                        UpdateSellButton();
                    }
                });
            }
            
            if (selectButton != null)
            {
                selectButton.onClick.RemoveAllListeners();
                selectButton.onClick.AddListener(() => {
                    // Toggle selection
                    if (selectedProperty == property)
                    {
                        selectedProperty = null;
                        if (toggle != null) toggle.isOn = false;
                    }
                    else
                    {
                        selectedProperty = property;
                        if (toggle != null) toggle.isOn = true;
                    }
                    UpdateSellButton();
                });
            }
        }
    }
    
    /// <summary>
    /// C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t b√°n
    /// </summary>
    private void UpdateSellButton()
    {
        if (sellButton != null)
        {
            sellButton.interactable = selectedProperty != null;
        }
    }
    
    /// <summary>
    /// B√°n t√†i s·∫£n ƒë√£ ch·ªçn
    /// </summary>
    private void SellSelectedProperty()
    {
        if (selectedProperty == null || currentPlayer == null) return;
        
        // B√°n t√†i s·∫£n
        currentPlayer.SellProperty(selectedProperty);
        
        // Ki·ªÉm tra l·∫°i xem c√≤n thi·∫øu ti·ªÅn kh√¥ng
        if (currentPlayer.money >= 0)
        {
            // ƒê√£ ƒë·ªß ti·ªÅn, ƒë√≥ng panel
            CloseBankruptcyPanel();
            if (GameManager.Instance != null)
                GameManager.Instance.ShowInfoHud($"{currentPlayer.playerName} ƒë√£ b√°n t√†i s·∫£n v√† tho√°t kh·ªèi t√¨nh tr·∫°ng ph√° s·∫£n!");
        }
        else
        {
            // V·∫´n c√≤n thi·∫øu ti·ªÅn, c·∫≠p nh·∫≠t l·∫°i danh s√°ch
            sellableProperties.Remove(selectedProperty);
            selectedProperty = null;
            
            if (sellableProperties.Count == 0)
            {
                // H·∫øt t√†i s·∫£n ƒë·ªÉ b√°n
                HandleGameOver(currentPlayer);
            }
            else
            {
                // C·∫≠p nh·∫≠t UI
                if (messageText != null)
                    messageText.text = $"V·∫´n c√≤n thi·∫øu {Mathf.Abs(currentPlayer.money)}$!\nH√£y b√°n th√™m t√†i s·∫£n.";
                    
                PopulatePropertiesList();
                UpdateSellButton();
            }
        }
    }
    
    /// <summary>
    /// ƒê√≥ng panel ph√° s·∫£n
    /// </summary>
    private void CloseBankruptcyPanel()
    {
        if (bankruptcyPanel != null)
            bankruptcyPanel.SetActive(false);
            
        currentPlayer = null;
        selectedProperty = null;
        sellableProperties.Clear();
    }
    
    /// <summary>
    /// X·ª≠ l√Ω game over khi player ph√° s·∫£n ho√†n to√†n
    /// </summary>
    private void HandleGameOver(PlayerController player)
    {
        Debug.Log($"üéÆ GAME OVER - {player.playerName} ƒë√£ ph√° s·∫£n ho√†n to√†n!");
        
        if (GameManager.Instance != null)
        {
            GameManager.Instance.ShowInfoHud($"üéÆ GAME OVER - {player.playerName} ƒë√£ ph√° s·∫£n!", 5f);
            
            // Lo·∫°i b·ªè player kh·ªèi danh s√°ch
            GameManager.Instance.players.Remove(player);
            
            // X√≥a player object
            if (player.gameObject != null)
                Destroy(player.gameObject);
                
            // Ki·ªÉm tra xem c√≤n player n√†o kh√¥ng
            if (GameManager.Instance.players.Count <= 1)
            {
                // Ch·ªâ c√≤n 1 player ho·∫∑c kh√¥ng c√≤n ai - k·∫øt th√∫c game
                StartCoroutine(EndGame());
            }
            else
            {
                // C·∫≠p nh·∫≠t l·∫°i currentPlayerIndex n·∫øu c·∫ßn
                if (GameManager.Instance.currentPlayerIndex >= GameManager.Instance.players.Count)
                {
                    GameManager.Instance.currentPlayerIndex = 0;
                }
            }
        }
        
        CloseBankruptcyPanel();
    }
    
    /// <summary>
    /// K·∫øt th√∫c game
    /// </summary>
    private IEnumerator EndGame()
    {
        yield return new WaitForSeconds(3f);
        
        if (GameManager.Instance.players.Count == 1)
        {
            PlayerController winner = GameManager.Instance.players[0];
            GameManager.Instance.ShowInfoHud($"üèÜ CHI·∫æN TH·∫ÆNG! {winner.playerName} l√† ng∆∞·ªùi chi·∫øn th·∫Øng!", 10f);
        }
        else
        {
            GameManager.Instance.ShowInfoHud("üéÆ T·∫•t c·∫£ ng∆∞·ªùi ch∆°i ƒë√£ ph√° s·∫£n! Game k·∫øt th√∫c.", 10f);
        }
        
        // C√≥ th·ªÉ th√™m logic restart game ho·∫∑c quay v·ªÅ menu ch√≠nh
        yield return new WaitForSeconds(5f);
        Debug.Log("Game k·∫øt th√∫c. C√≥ th·ªÉ th√™m logic restart ho·∫∑c quay v·ªÅ menu.");
    }
} 