using UnityEngine;
using TMPro;

/// <summary>
/// Manager ƒë·ªÉ t·ª± ƒë·ªông thay th·∫ø c√°c emoji icon trong TextMeshPro khi game kh·ªüi ƒë·ªông
/// </summary>
public class IconReplacerManager : MonoBehaviour
{
    [Header("Icon Replacement Settings")]
    [Tooltip("Ph∆∞∆°ng th·ª©c thay th·∫ø icon: 0=Remove, 1=Unicode, 2=Descriptive")]
    public int replacementMethod = 0;
    
    [Tooltip("T·ª± ƒë·ªông √°p d·ª•ng khi Start")]
    public bool autoApplyOnStart = true;
    
    [Tooltip("√Åp d·ª•ng cho t·∫•t c·∫£ TextMeshPro trong scene")]
    public bool applyToAllTextMeshPro = true;
    
    [Header("Manual Application")]
    [Tooltip("Danh s√°ch TextMeshPro components c·∫ßn √°p d·ª•ng thay th·∫ø")]
    public TextMeshProUGUI[] specificTextComponents;

    private void Start()
    {
        if (autoApplyOnStart)
        {
            ApplyIconReplacement();
        }
    }

    /// <summary>
    /// √Åp d·ª•ng thay th·∫ø icon cho t·∫•t c·∫£ TextMeshPro
    /// </summary>
    [ContextMenu("Apply Icon Replacement")]
    public void ApplyIconReplacement()
    {
        Debug.Log("üîÑ B·∫Øt ƒë·∫ßu thay th·∫ø emoji icon...");
        
        if (applyToAllTextMeshPro)
        {
            IconReplacer.ApplyToAllTextMeshPro(replacementMethod);
        }
        
        if (specificTextComponents != null && specificTextComponents.Length > 0)
        {
            foreach (var textComponent in specificTextComponents)
            {
                if (textComponent != null)
                {
                    IconReplacer.ApplyToTextMeshPro(textComponent, replacementMethod);
                }
            }
        }
        
        Debug.Log($"‚úÖ ƒê√£ ho√†n th√†nh thay th·∫ø emoji icon (Ph∆∞∆°ng th·ª©c: {GetMethodName(replacementMethod)})");
    }

    /// <summary>
    /// √Åp d·ª•ng thay th·∫ø cho m·ªôt TextMeshPro c·ª• th·ªÉ
    /// </summary>
    /// <param name="textComponent">TextMeshPro component</param>
    public void ApplyToSpecificText(TextMeshProUGUI textComponent)
    {
        if (textComponent != null)
        {
            IconReplacer.ApplyToTextMeshPro(textComponent, replacementMethod);
            Debug.Log($"‚úÖ ƒê√£ √°p d·ª•ng thay th·∫ø cho {textComponent.name}");
        }
    }

    /// <summary>
    /// Thay ƒë·ªïi ph∆∞∆°ng th·ª©c thay th·∫ø v√† √°p d·ª•ng l·∫°i
    /// </summary>
    /// <param name="method">Ph∆∞∆°ng th·ª©c m·ªõi (0: Remove, 1: Unicode, 2: Descriptive)</param>
    public void ChangeReplacementMethod(int method)
    {
        replacementMethod = Mathf.Clamp(method, 0, 2);
        ApplyIconReplacement();
    }

    /// <summary>
    /// L·∫•y t√™n ph∆∞∆°ng th·ª©c thay th·∫ø
    /// </summary>
    /// <param name="method">S·ªë ph∆∞∆°ng th·ª©c</param>
    /// <returns>T√™n ph∆∞∆°ng th·ª©c</returns>
    private string GetMethodName(int method)
    {
        switch (method)
        {
            case 0: return "Remove Emojis";
            case 1: return "Unicode Icons";
            case 2: return "Descriptive Text";
            default: return "Unknown";
        }
    }

    /// <summary>
    /// Test thay th·∫ø v·ªõi text m·∫´u
    /// </summary>
    [ContextMenu("Test Icon Replacement")]
    public void TestIconReplacement()
    {
        string testText = "‚ö†Ô∏è C·∫£nh b√°o! üíÄ Ph√° s·∫£n! ‚úÖ Th√†nh c√¥ng! ü§ñ Bot! ‚è∏Ô∏è T·∫°m d·ª´ng! üé≤ Dice! ‚è≥ Ch·ªù! ‚è∞ Th·ªùi gian! üéÆ Game!";
        string result = "";
        
        switch (replacementMethod)
        {
            case 0:
                result = IconReplacer.ReplaceEmojis(testText);
                break;
            case 1:
                result = IconReplacer.ReplaceWithUnicodeIcons(testText);
                break;
            case 2:
                result = IconReplacer.ReplaceWithDescriptiveText(testText);
                break;
        }
        
        Debug.Log($"üß™ Test Icon Replacement:");
        Debug.Log($"Original: {testText}");
        Debug.Log($"Result: {result}");
    }
} 